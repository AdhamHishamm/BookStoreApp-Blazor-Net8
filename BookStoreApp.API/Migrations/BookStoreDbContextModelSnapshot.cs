// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using BookStoreApp.API.Data;

namespace BookStoreApp.API.Migrations
{
	[DbContext(typeof(BookStoreDbContext))]
	partial class BookStoreDbContextModelSnapshot : ModelSnapshot
	{
		protected override void BuildModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder
				.HasAnnotation("ProductVersion", "8.0.6")
				.HasAnnotation("Relational:MaxIdentifierLength", 128);

			modelBuilder.Entity<Author>(entity =>
			{
				entity.ToTable("Authors");

				entity.Property(e => e.Id)
					.HasColumnType("int")
					.ValueGeneratedOnAdd();

				entity.Property(e => e.Bio)
					.HasMaxLength(250)
					.HasColumnType("nvarchar(250)");

				entity.Property(e => e.FirstName)
					.HasMaxLength(50)
					.HasColumnType("nvarchar(50)");

				entity.Property(e => e.LastName)
					.HasMaxLength(50)
					.HasColumnType("nvarchar(50)");

				entity.HasKey(e => e.Id);
			});

			modelBuilder.Entity<Book>(entity =>
			{
				entity.ToTable("Books");

				entity.Property(e => e.Id)
					.HasColumnType("int")
					.ValueGeneratedOnAdd();

				entity.Property(e => e.Image)
					.HasMaxLength(250)
					.HasColumnType("nvarchar(250)");

				entity.Property(e => e.Isbn)
					.IsRequired()
					.HasMaxLength(50)
					.HasColumnType("nvarchar(50)")
					.HasColumnName("ISBN");

				entity.Property(e => e.Price)
					.HasColumnType("decimal(18, 2)");

				entity.Property(e => e.Summary)
					.HasMaxLength(250)
					.HasColumnType("nvarchar(250)");

				entity.Property(e => e.Title)
					.HasMaxLength(50)
					.HasColumnType("nvarchar(50)");

				entity.Property(e => e.Year)
					.HasColumnType("int");

				entity.HasKey(e => e.Id);

				entity.HasIndex(e => e.Isbn, "UQ__Books__447D36EA5D6BDD3B")
					.IsUnique();

				entity.HasOne(d => d.Author)
					.WithMany(p => p.Books)
					.HasForeignKey(d => d.AuthorId)
					.HasConstraintName("FK_Books_Authors")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();
			});

			OnModelCreatingPartial(modelBuilder);
		}

		partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
	}
}
