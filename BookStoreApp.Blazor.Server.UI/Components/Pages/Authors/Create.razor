@page "/authors/create"
@inject IAuthorService authorService
@inject NavigationManager navManager
@attribute [Authorize(Roles = Roles.Administrator)]

<h3>Create New Author</h3>
<EditForm Model="Author" OnValidSubmit="HandleCreateAuthor">
	<DataAnnotationsValidator/>
	<ValidationSummary/>
	<div class="form-group">
		<label for="firstname">First Name</label>
		<InputText @bind-Value="Author.FirstName" class="form-control" id="firstname" />
		<ValidationSummary For="@(() => Author.FirstName)"/>
	</div>
	<div class="form-group">
		<label for="lastname">Last Name</label>
		<InputText @bind-Value="Author.Lastname" class="form-control" id="lastname" />
		<ValidationSummary For="@(() => Author.Lastname)" />
	</div>
	<div class="form-group">
		<label for="bio">Biography</label>
		<InputTextArea @bind-Value="Author.Bio" class="form-control" id="bio" />
		<ValidationSummary For="@(() => Author.Bio)" />
	</div>
	<br />

	<button class="btn btn-primary" type="submit">
		<span class="pi pi-pencil"></span>
		Create Author
	</button>
	<button @onclick="BackToList" class="btn btn-outline-secondary">
		<span class="pi pi-media-skip-backward"></span>
		Back To List
	</button>
</EditForm>

@code {
	private AuthorCreateDto Author = new AuthorCreateDto();

	private async Task HandleCreateAuthor()
	{
		var response = await authorService.CreateAuthor(Author);
		if (response.Success)
		{
			BackToList();
		}
	}

	private void BackToList()
	{
		navManager.NavigateTo("/authors/");
	}
}